''' Script to calculate equilibrium MSD from a given trajectory (or trajectories) for
the nonuniform Icosahedron.  Produces a PKL file which is read by plotting scripts.'''

import argparse
import cPickle
import cProfile
import numpy as np
import os
import pstats
import StringIO
import sys
sys.path.append('..')

from config_local import DATA_DIR
from quaternion_integrator.quaternion import Quaternion
import icosahedron_nonuniform as icn
from utils import MSDStatistics
from utils import calc_msd_data_from_trajectory
from utils import read_trajectory_from_txt

def calc_icosahedron_center(location, orientation):
  ''' Function to get icosahedron center.'''
  return location


if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Calculate rotation and '
                                   'translation MSD from a trajectory '
                                   'generated by icosohedron_nonuniform.py')
  parser.add_argument('--profile', dest='profile', type=bool, default=False,
                      help='True or False: Do we profile this run or not. '
                      'Defaults to false. Put --profile 1 to profile.')

  args=parser.parse_args()
  if args.profile:
    pr = cProfile.Profile()
    pr.enable()

  # List files here to process.  They must have the same timestep.
  trajectory_file_names = [
    'nonuniform-icosahedron-trajectory-dt-0.1-N-1000000-scheme-RFD-final-1.pkl',
    'nonuniform-icosahedron-trajectory-dt-0.1-N-1000000-scheme-RFD-final-2.pkl',
    'nonuniform-icosahedron-trajectory-dt-0.1-N-1000000-scheme-RFD-final-3.pkl',
    'nonuniform-icosahedron-trajectory-dt-0.1-N-1000000-scheme-RFD-final-4.pkl']
    

  scheme = 'RFD'
  dt = 0.1
  end = 1200.
  N = 1000000
  data_name = 'final'

  ##########
  msd_runs = []
  for name in trajectory_file_names:
    data_file_name = os.path.join(DATA_DIR, 'icosahedron', name)
    # Check correct timestep.
    params, locations, orientations = read_trajectory_from_txt(data_file_name)
    if (abs(float(params['dt']) - dt) > 1e-7):
      raise Exception('Timestep of data does not match specified timestep.')
    if float(params['n_steps']) != N:
      raise Exception('Number of steps in data does not match specified '
                      'Number of steps.')
    
    # Calculate MSD data (just an array of MSD at each time.)
    msd_data = calc_msd_data_from_trajectory(locations, orientations, 
                                             calc_icosahedron_center, dt, end)
    # append to calculate Mean and Std.
    msd_runs.append(msd_data)

  mean_msd = np.mean(np.array(msd_runs), axis=0)
  std_msd = np.std(np.array(msd_runs), axis=0)/np.sqrt(len(trajectory_file_names))
  time = np.arange(0, end, dt)

  msd_statistics = MSDStatistics(params)
  msd_statistics.add_run(scheme, dt, [time, mean_msd, std_msd])

  # Save MSD data with pickle.
  msd_data_file_name = os.path.join(
    '.', 'data',
    'icosahedron-msd-dt-%s-N-%s-end-%s-scheme-%s-runs-%s-%s.pkl' %
    (dt, N, end, scheme, len(trajectory_file_names), data_name))

  with open(msd_data_file_name, 'wb') as f:
    cPickle.dump(msd_statistics, f)
  
  if args.profile:
    pr.disable()
    s = StringIO.StringIO()
    sortby = 'cumulative'
    ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
    ps.print_stats()
    print s.getvalue()  
